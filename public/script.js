// i18n setup
let currentLang = 'en';
const translations = {
    en: {
        app: {
            title: 'AI Doctor',
            subtitle: 'Medical Diagnosis & Prescription Support System'
        },
        form: {
            title: 'Patient Information',
            fullName: { label: 'Full Name *', placeholder: 'Enter full name' },
            age: { label: 'Age (years) *', placeholder: 'Enter age' },
            sex: { label: 'Sex *', placeholder: 'Select Sex', male: 'Male', female: 'Female', other: 'Other' },
            weight: { label: 'Weight (kg) *', placeholder: 'Enter weight in kg' },
            allergies: { label: 'Allergies (if any)', placeholder: 'List any known allergies, or leave blank if none' },
            symptoms: { label: 'Symptoms Description *', placeholder: 'Describe your symptoms in detail...' }
        },
        buttons: {
            generate: 'Generate Diagnosis',
            clear: 'Clear Form',
            download: 'Download Prescription (PDF)',
            new: 'New Diagnosis'
        },
        loading: {
            title: 'Analyzing Symptoms...',
            subtitle: 'Our AI is processing your information and generating a medical assessment.',
            step1: 'Analyzing symptoms',
            step2: 'AI diagnosis',
            step3: 'Medication review',
            step4: 'Generating prescription'
        },
        results: {
            title: 'AI Diagnosis Results',
            confidence: 'Confidence'
        },
        labels: {
            name: 'Name',
            age: 'Age',
            years: 'years',
            sex: 'Sex',
            weight: 'Weight',
            kg: 'kg',
            allergies: 'Allergies',
            none: 'None',
            symptomsReported: 'Symptoms Reported',
            aiDiagnosis: 'AI Diagnosis',
            confidenceLevel: 'Confidence Level',
            disclaimerTitle: 'Important Disclaimer',
            generatedBy: 'Generated by AI Doctor System',
            date: 'Date',
            time: 'Time',
            reportTitle: 'Medical Diagnosis & Prescription Report'
        },
        emergency: {
            title: 'üö® EMERGENCY WARNING',
            message: 'This case requires immediate medical attention. Please seek emergency care immediately.'
        },
        errors: {
            noPrescription: 'No prescription available to download',
            apiFail: 'Failed to connect to the diagnosis service. Please check your connection and try again.',
            generateFail: 'Failed to generate diagnosis'
        },
        footer: {
            disclaimer: {
                title: '‚ö†Ô∏è Important Disclaimer',
                text: 'This AI system provides informational support only and does not replace professional medical advice. Always consult qualified healthcare providers for diagnosis and treatment.'
            },
            copyright: '¬© 2024 AI Doctor. Built with ‚ù§Ô∏è for better healthcare access.'
        }
    },
    hi: {
        app: {
            title: '‡§è‡§Ü‡§à ‡§°‡•â‡§ï‡•ç‡§ü‡§∞',
            subtitle: '‡§Æ‡•á‡§°‡§ø‡§ï‡§≤ ‡§°‡§æ‡§Ø‡§ó‡•ç‡§®‡•ã‡§∏‡§ø‡§∏ ‡§î‡§∞ ‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ'
        },
        form: {
            title: '‡§∞‡•ã‡§ó‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä',
            fullName: { label: '‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ *', placeholder: '‡§™‡•Ç‡§∞‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç' },
            age: { label: '‡§Ü‡§Ø‡•Å (‡§µ‡§∞‡•ç‡§∑) *', placeholder: '‡§Ü‡§Ø‡•Å ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç' },
            sex: { label: '‡§≤‡§ø‡§Ç‡§ó *', placeholder: '‡§≤‡§ø‡§Ç‡§ó ‡§ö‡•Å‡§®‡•á‡§Ç', male: '‡§™‡•Å‡§∞‡•Å‡§∑', female: '‡§Æ‡§π‡§ø‡§≤‡§æ', other: '‡§Ö‡§®‡•ç‡§Ø' },
            weight: { label: '‡§µ‡§ú‡§º‡§® (‡§ï‡§ø‡§≤‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ) *', placeholder: '‡§µ‡§ú‡§º‡§® ‡§ï‡§ø‡§≤‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ ‡§Æ‡•á‡§Ç ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç' },
            allergies: { label: '‡§è‡§≤‡§∞‡•ç‡§ú‡•Ä (‡§Ø‡§¶‡§ø ‡§ï‡•ã‡§à)', placeholder: '‡§ú‡•ç‡§û‡§æ‡§§ ‡§è‡§≤‡§∞‡•ç‡§ú‡•Ä ‡§≤‡§ø‡§ñ‡•á‡§Ç, ‡§Ø‡§æ ‡§ñ‡§æ‡§≤‡•Ä ‡§õ‡•ã‡§°‡§º‡•á‡§Ç' },
            symptoms: { label: '‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ *', placeholder: '‡§Ö‡§™‡§®‡•á ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§ø‡§∏‡•ç‡§§‡§æ‡§∞ ‡§∏‡•á ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡•á‡§Ç...' }
        },
        buttons: {
            generate: '‡§°‡§æ‡§Ø‡§ó‡•ç‡§®‡•ã‡§∏‡§ø‡§∏ ‡§¨‡§®‡§æ‡§è‡§Ç',
            clear: '‡§´‡•â‡§∞‡•ç‡§Æ ‡§∏‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç',
            download: '‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç (PDF)',
            new: '‡§®‡§Ø‡§æ ‡§°‡§æ‡§Ø‡§ó‡•ç‡§®‡•ã‡§∏‡§ø‡§∏'
        },
        loading: {
            title: '‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...',
            subtitle: '‡§π‡§Æ‡§æ‡§∞‡§æ ‡§è‡§Ü‡§à ‡§Ü‡§™‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à ‡§î‡§∞ ‡§Æ‡•á‡§°‡§ø‡§ï‡§≤ ‡§Ü‡§ï‡§≤‡§® ‡§¨‡§®‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§',
            step1: '‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£',
            step2: '‡§è‡§Ü‡§à ‡§°‡§æ‡§Ø‡§ó‡•ç‡§®‡•ã‡§∏‡§ø‡§∏',
            step3: '‡§¶‡§µ‡§æ‡§á‡§Ø‡•ã‡§Ç ‡§ï‡•Ä ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ',
            step4: '‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§¨‡§® ‡§∞‡§π‡§æ ‡§π‡•à'
        },
        results: {
            title: '‡§è‡§Ü‡§à ‡§°‡§æ‡§Ø‡§ó‡•ç‡§®‡•ã‡§∏‡§ø‡§∏ ‡§™‡§∞‡§ø‡§£‡§æ‡§Æ',
            confidence: '‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§∏‡•ç‡§§‡§∞'
        },
        labels: {
            name: '‡§®‡§æ‡§Æ',
            age: '‡§Ü‡§Ø‡•Å',
            years: '‡§µ‡§∞‡•ç‡§∑',
            sex: '‡§≤‡§ø‡§Ç‡§ó',
            weight: '‡§µ‡§ú‡§º‡§®',
            kg: '‡§ï‡§ø‡§ó‡•ç‡§∞‡§æ',
            allergies: '‡§è‡§≤‡§∞‡•ç‡§ú‡•Ä',
            none: '‡§ï‡•ã‡§à ‡§®‡§π‡•Ä‡§Ç',
            symptomsReported: '‡§¨‡§§‡§æ‡§è ‡§ó‡§è ‡§≤‡§ï‡•ç‡§∑‡§£',
            aiDiagnosis: '‡§è‡§Ü‡§à ‡§®‡§ø‡§¶‡§æ‡§®',
            confidenceLevel: '‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§∏‡•ç‡§§‡§∞',
            disclaimerTitle: '‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£',
            generatedBy: '‡§è‡§Ü‡§à ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§ú‡§®‡§∞‡•á‡§ü‡•á‡§°',
            date: '‡§§‡§æ‡§∞‡•Ä‡§ñ',
            time: '‡§∏‡§Æ‡§Ø',
            reportTitle: '‡§Æ‡•á‡§°‡§ø‡§ï‡§≤ ‡§°‡§æ‡§Ø‡§ó‡•ç‡§®‡•ã‡§∏‡§ø‡§∏ ‡§î‡§∞ ‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü'
        },
        emergency: {
            title: 'üö® ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä',
            message: '‡§á‡§∏ ‡§Æ‡§æ‡§Æ‡§≤‡•á ‡§Æ‡•á‡§Ç ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï‡•Ä‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•á‡§µ‡§æ ‡§≤‡•á‡§Ç‡•§'
        },
        errors: {
            noPrescription: '‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç',
            apiFail: '‡§°‡§æ‡§Ø‡§ó‡•ç‡§®‡•ã‡§∏‡§ø‡§∏ ‡§∏‡•á‡§µ‡§æ ‡§∏‡•á ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§ú‡§æ‡§Å‡§ö‡•á‡§Ç ‡§î‡§∞ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§',
            generateFail: '‡§°‡§æ‡§Ø‡§ó‡•ç‡§®‡•ã‡§∏‡§ø‡§∏ ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§´‡§≤'
        },
        footer: {
            disclaimer: {
                title: '‚ö†Ô∏è ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§∞‡§£',
                text: '‡§Ø‡§π ‡§è‡§Ü‡§à ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§ï‡•á‡§µ‡§≤ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ ‡§™‡•á‡§∂‡•á‡§µ‡§∞ ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï‡•Ä‡§Ø ‡§∏‡§≤‡§æ‡§π ‡§ï‡§æ ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§®‡§ø‡§¶‡§æ‡§® ‡§î‡§∞ ‡§â‡§™‡§ö‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï ‡§∏‡•á ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ï‡§∞‡•á‡§Ç‡•§'
            },
            copyright: '¬© 2024 ‡§è‡§Ü‡§à ‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡•§ ‡§¨‡•á‡§π‡§§‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡§π‡•Å‡§Ç‡§ö ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§®‡§æ‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§'
        }
    },
    mr: {
        app: {
            title: '‡§è‡§Ü‡§Ø ‡§°‡•â‡§ï‡•ç‡§ü‡§∞',
            subtitle: '‡§µ‡•à‡§¶‡•ç‡§Ø‡§ï‡•Ä‡§Ø ‡§®‡§ø‡§¶‡§æ‡§® ‡§Ü‡§£‡§ø ‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§∏‡§π‡§æ‡§Ø‡•ç‡§Ø ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä'
        },
        form: {
            title: '‡§∞‡•Å‡§ó‡•ç‡§£ ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä',
            fullName: { label: '‡§™‡•Ç‡§∞‡•ç‡§£ ‡§®‡§æ‡§µ *', placeholder: '‡§™‡•Ç‡§∞‡•ç‡§£ ‡§®‡§æ‡§µ ‡§≤‡§ø‡§π‡§æ' },
            age: { label: '‡§µ‡§Ø (‡§µ‡§∞‡•ç‡§∑) *', placeholder: '‡§µ‡§Ø ‡§≤‡§ø‡§π‡§æ' },
            sex: { label: '‡§≤‡§ø‡§Ç‡§ó *', placeholder: '‡§≤‡§ø‡§Ç‡§ó ‡§®‡§ø‡§µ‡§°‡§æ', male: '‡§™‡•Å‡§∞‡•Å‡§∑', female: '‡§∏‡•ç‡§§‡•ç‡§∞‡•Ä', other: '‡§á‡§§‡§∞' },
            weight: { label: '‡§µ‡§ú‡§® (‡§ï‡§ø‡§≤‡•ã) *', placeholder: '‡§µ‡§ú‡§® ‡§ï‡§ø‡§≤‡•ã‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§≤‡§ø‡§π‡§æ' },
            allergies: { label: '‡§Ö‡•Ö‡§≤‡§∞‡•ç‡§ú‡•Ä (‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏)', placeholder: '‡§ú‡•ç‡§û‡§æ‡§§ ‡§Ö‡•Ö‡§≤‡§∞‡•ç‡§ú‡•Ä‡§ú ‡§≤‡§ø‡§π‡§æ, ‡§ï‡§ø‡§Ç‡§µ‡§æ ‡§∞‡§ø‡§ï‡§æ‡§Æ‡•á ‡§†‡•á‡§µ‡§æ' },
            symptoms: { label: '‡§≤‡§ï‡•ç‡§∑‡§£‡§æ‡§Ç‡§ö‡•á ‡§µ‡§∞‡•ç‡§£‡§® *', placeholder: '‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§≤‡§ï‡•ç‡§∑‡§£‡•á ‡§∏‡§µ‡§ø‡§∏‡•ç‡§§‡§∞ ‡§≤‡§ø‡§π‡§æ...' }
        },
        buttons: {
            generate: '‡§®‡§ø‡§¶‡§æ‡§® ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§æ',
            clear: '‡§´‡•â‡§∞‡•ç‡§Æ ‡§∏‡§æ‡§´ ‡§ï‡§∞‡§æ',
            download: '‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡§æ (PDF)',
            new: '‡§®‡§µ‡•Ä‡§® ‡§®‡§ø‡§¶‡§æ‡§®'
        },
        loading: {
            title: '‡§≤‡§ï‡•ç‡§∑‡§£‡§æ‡§Ç‡§ö‡•á ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ö‡§æ‡§≤‡•Ç ‡§Ü‡§π‡•á...',
            subtitle: '‡§Ü‡§Æ‡§ö‡§æ ‡§è‡§Ü‡§Ø ‡§§‡•Å‡§Æ‡§ö‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§ø‡§§ ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•á ‡§Ü‡§£‡§ø ‡§µ‡•à‡§¶‡•ç‡§Ø‡§ï‡•Ä‡§Ø ‡§Æ‡•Ç‡§≤‡•ç‡§Ø‡§æ‡§Ç‡§ï‡§® ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§§ ‡§Ü‡§π‡•á.',
            step1: '‡§≤‡§ï‡•ç‡§∑‡§£‡§æ‡§Ç‡§ö‡•á ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£',
            step2: '‡§è‡§Ü‡§Ø ‡§®‡§ø‡§¶‡§æ‡§®',
            step3: '‡§î‡§∑‡§ß‡§æ‡§Ç‡§ö‡•á ‡§™‡•Å‡§®‡§∞‡§æ‡§µ‡§≤‡•ã‡§ï‡§®',
            step4: '‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§§‡§Ø‡§æ‡§∞ ‡§π‡•ã‡§§ ‡§Ü‡§π‡•á'
        },
        results: {
            title: '‡§è‡§Ü‡§Ø ‡§®‡§ø‡§¶‡§æ‡§® ‡§®‡§ø‡§ï‡§æ‡§≤',
            confidence: '‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏'
        },
        labels: {
            name: '‡§®‡§æ‡§µ',
            age: '‡§µ‡§Ø',
            years: '‡§µ‡§∞‡•ç‡§∑',
            sex: '‡§≤‡§ø‡§Ç‡§ó',
            weight: '‡§µ‡§ú‡§®',
            kg: '‡§ï‡§ø‡§≤‡•ã',
            allergies: '‡§Ö‡•Ö‡§≤‡§∞‡•ç‡§ú‡•Ä',
            none: '‡§®‡§æ‡§π‡•Ä',
            symptomsReported: '‡§®‡§Æ‡•Ç‡§¶ ‡§ï‡•á‡§≤‡•á‡§≤‡•Ä ‡§≤‡§ï‡•ç‡§∑‡§£‡•á',
            aiDiagnosis: '‡§è‡§Ü‡§Ø ‡§®‡§ø‡§¶‡§æ‡§®',
            confidenceLevel: '‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§™‡§æ‡§§‡§≥‡•Ä',
            disclaimerTitle: '‡§Æ‡§π‡§§‡•ç‡§§‡•ç‡§µ‡§æ‡§ö‡§æ ‡§®‡§ø‡§∑‡•á‡§ß',
            generatedBy: '‡§è‡§Ü‡§Ø ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§™‡•ç‡§∞‡§£‡§æ‡§≤‡•Ä‡§¶‡•ç‡§µ‡§æ‡§∞‡•á ‡§§‡§Ø‡§æ‡§∞',
            date: '‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï',
            time: '‡§µ‡•á‡§≥',
            reportTitle: '‡§µ‡•à‡§¶‡•ç‡§Ø‡§ï‡•Ä‡§Ø ‡§®‡§ø‡§¶‡§æ‡§® ‡§Ü‡§£‡§ø ‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§Ö‡§π‡§µ‡§æ‡§≤'
        },
        emergency: {
            title: 'üö® ‡§§‡§æ‡§§‡§°‡•Ä‡§ö‡•Ä ‡§∏‡•Ç‡§ö‡§®‡§æ',
            message: '‡§Ø‡§æ ‡§™‡•ç‡§∞‡§ï‡§∞‡§£‡§æ‡§§ ‡§§‡§æ‡§§‡§°‡•Ä‡§®‡•á ‡§µ‡•à‡§¶‡•ç‡§Ø‡§ï‡•Ä‡§Ø ‡§Æ‡§¶‡§§‡•Ä‡§ö‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§Ü‡§π‡•á. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§§‡§æ‡§§‡§°‡•Ä‡§ö‡•Ä ‡§∏‡•á‡§µ‡§æ ‡§ò‡•ç‡§Ø‡§æ.'
        },
        errors: {
            noPrescription: '‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§°‡§∏‡§æ‡§†‡•Ä ‡§ï‡•ã‡§£‡§§‡•Ä‡§π‡•Ä ‡§™‡•ç‡§∞‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§æ‡§π‡•Ä',
            apiFail: '‡§®‡§ø‡§¶‡§æ‡§® ‡§∏‡•á‡§µ‡•á‡§∂‡•Ä ‡§ï‡§®‡•á‡§ï‡•ç‡§ü ‡§π‡•ã‡§ä ‡§∂‡§ï‡§≤‡•á ‡§®‡§æ‡§π‡•Ä. ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡§®‡•á‡§ï‡•ç‡§∂‡§® ‡§§‡§™‡§æ‡§∏‡§æ ‡§Ü‡§£‡§ø ‡§™‡•Å‡§®‡•ç‡§π‡§æ ‡§™‡•ç‡§∞‡§Ø‡§§‡•ç‡§® ‡§ï‡§∞‡§æ.',
            generateFail: '‡§®‡§ø‡§¶‡§æ‡§® ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§§ ‡§Ö‡§Ø‡§∂‡§∏‡•ç‡§µ‡•Ä'
        },
        footer: {
            disclaimer: {
                title: '‚ö†Ô∏è ‡§Æ‡§π‡§§‡•ç‡§§‡•ç‡§µ‡§æ‡§ö‡§æ ‡§®‡§ø‡§∑‡•á‡§ß',
                text: '‡§π‡§æ ‡§è‡§Ü‡§Ø ‡§∏‡§ø‡§∏‡•ç‡§ü‡§Æ ‡§´‡§ï‡•ç‡§§ ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§¶‡•á‡§§‡•ã ‡§Ü‡§£‡§ø ‡§µ‡•ç‡§Ø‡§æ‡§µ‡§∏‡§æ‡§Ø‡§ø‡§ï ‡§µ‡•à‡§¶‡•ç‡§Ø‡§ï‡•Ä‡§Ø ‡§∏‡§≤‡•ç‡§≤‡•ç‡§Ø‡§æ‡§ö‡§æ ‡§™‡§∞‡•ç‡§Ø‡§æ‡§Ø ‡§®‡§æ‡§π‡•Ä. ‡§®‡§ø‡§¶‡§æ‡§® ‡§Ü‡§£‡§ø ‡§â‡§™‡§ö‡§æ‡§∞‡§æ‡§Ç‡§∏‡§æ‡§†‡•Ä ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§æ‡§§‡•ç‡§∞ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞‡§æ‡§Ç‡§ö‡§æ ‡§∏‡§≤‡•ç‡§≤‡§æ ‡§ò‡•ç‡§Ø‡§æ.'
            },
            copyright: '¬© 2024 ‡§è‡§Ü‡§Ø ‡§°‡•â‡§ï‡•ç‡§ü‡§∞. ‡§â‡§§‡•ç‡§§‡§Æ ‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø‡§∏‡•á‡§µ‡•á‡§∏‡§æ‡§†‡•Ä ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡•á‡§≤‡•á‡§≤‡•á.'
        }
    }
};

function t(path, fallback = '') {
    const parts = path.split('.');
    let cur = translations[currentLang] || translations.en;
    for (const p of parts) {
        if (cur && Object.prototype.hasOwnProperty.call(cur, p)) {
            cur = cur[p];
        } else {
            cur = null;
            break;
        }
    }
    if (typeof cur === 'string') return cur;
    if (cur && typeof cur === 'object' && 'label' in cur) return cur.label;
    return fallback || path;
}

function setLanguage(lang) {
    if (!translations[lang]) lang = 'en';
    currentLang = lang;
    localStorage.setItem('lang', lang);
    document.documentElement.setAttribute('lang', lang);
    translatePage();
    markActiveLanguageButton();
}

function translatePage() {
    // Text content
    document.querySelectorAll('[data-i18n]').forEach(el => {
        const key = el.getAttribute('data-i18n');
        const append = el.getAttribute('data-i18n-append');
        const text = t(key, el.textContent.trim());
        el.textContent = append ? `${text}${append}` : text;
    });
    // Placeholders
    document.querySelectorAll('[data-i18n-placeholder]').forEach(el => {
        const key = el.getAttribute('data-i18n-placeholder');
        const placeholder = t(key, el.getAttribute('placeholder') || '');
        // Inputs/Textareas: placeholder attribute
        if (el.tagName === 'INPUT' || el.tagName === 'TEXTAREA') {
            el.setAttribute('placeholder', placeholder);
        }
        // Options: text content
        if (el.tagName === 'OPTION') {
            el.textContent = placeholder;
        }
    });
}

function markActiveLanguageButton() {
    document.querySelectorAll('.lang-btn').forEach(btn => {
        if (btn.getAttribute('data-lang') === currentLang) {
            btn.classList.add('active');
            btn.setAttribute('aria-current', 'true');
        } else {
            btn.classList.remove('active');
            btn.removeAttribute('aria-current');
        }
    });
    updateKeyboardIndicator();
}

function updateKeyboardIndicator() {
    if (!kbIndicator) return;
    const map = { en: 'ENG', hi: '‡§π‡§ø', mr: '‡§Æ‡§∞‡§æ' };
    kbIndicator.textContent = map[currentLang] || 'ENG';
}

// Global variables
let currentDiagnosis = null;
let currentPatientData = null;

// DOM elements
const patientForm = document.getElementById('patientForm');
const formSection = document.getElementById('formSection');
const loadingSection = document.getElementById('loadingSection');
const resultsSection = document.getElementById('resultsSection');
const submitBtn = document.getElementById('submitBtn');
const clearBtn = document.getElementById('clearBtn');
const downloadBtn = document.getElementById('downloadBtn');
const newDiagnosisBtn = document.getElementById('newDiagnosisBtn');
const prescriptionContent = document.getElementById('prescriptionContent');
const confidenceBadge = document.getElementById('confidenceBadge');
const confidenceText = document.getElementById('confidenceText');
const emergencyWarning = document.getElementById('emergencyWarning');
const kbIndicator = document.getElementById('kbIndicator');

// Event listeners
document.addEventListener('DOMContentLoaded', function() {
    // Init language
    const saved = localStorage.getItem('lang');
    const browserLang = (navigator.language || 'en').slice(0, 2);
    setLanguage(saved || (translations[browserLang] ? browserLang : 'en'));

    // Bind language buttons
    document.querySelectorAll('.lang-btn').forEach(btn => {
        btn.addEventListener('click', () => setLanguage(btn.getAttribute('data-lang')));
    });

    // Initialize keyboard indicator and listeners
    updateKeyboardIndicator();
    document.querySelectorAll('#patientForm input, #patientForm textarea, #patientForm select').forEach(el => {
        el.addEventListener('focus', updateKeyboardIndicator);
        el.addEventListener('keydown', updateKeyboardIndicator);
        el.addEventListener('input', updateKeyboardIndicator);
    });

    patientForm.addEventListener('submit', handleFormSubmit);
    clearBtn.addEventListener('click', clearForm);
    downloadBtn.addEventListener('click', downloadPrescription);
    newDiagnosisBtn.addEventListener('click', showForm);
    
    // Initialize the app
    initializeApp();
});

// Initialize the application
function initializeApp() {
    console.log('üöÄ AI Doctor Application Initialized');
    
    // Check PDF library availability immediately and after delays
    checkPDFLibrary();
    setTimeout(checkPDFLibrary, 1000);
    setTimeout(checkPDFLibrary, 3000);
    setTimeout(checkPDFLibrary, 5000);
    
    // Check if we have any stored data
    const storedDiagnosis = localStorage.getItem('lastDiagnosis');
    if (storedDiagnosis) {
        try {
            const diagnosis = JSON.parse(storedDiagnosis);
            showResults(diagnosis);
        } catch (error) {
            console.error('Error parsing stored diagnosis:', error);
            localStorage.removeItem('lastDiagnosis');
        }
    }
}

// Check PDF library availability
function checkPDFLibrary() {
    console.log('üîç Checking PDF library availability...');
    console.log('window.jspdf:', window.jspdf);
    console.log('window.jsPDF:', window.jsPDF);
    console.log('window.jspdf?.jsPDF:', window.jspdf?.jsPDF);
    console.log('window.jspdf?.default:', window.jspdf?.default);
    
    // Check all possible global variables
    console.log('All window properties containing "pdf":', Object.keys(window).filter(k => k.toLowerCase().includes('pdf')));
    console.log('All window properties containing "jspdf":', Object.keys(window).filter(k => k.toLowerCase().includes('jspdf')));
    
    if (window.jspdf) {
        console.log('‚úÖ window.jspdf exists');
        console.log('jsPDF methods:', Object.keys(window.jspdf));
    } else {
        console.log('‚ùå window.jspdf not found');
    }
    
    if (window.jsPDF) {
        console.log('‚úÖ window.jsPDF exists');
    } else {
        console.log('‚ùå window.jsPDF not found');
    }
    
    // Check if any PDF-related objects exist
    if (typeof jsPDF !== 'undefined') {
        console.log('‚úÖ jsPDF global exists');
    } else {
        console.log('‚ùå jsPDF global not found');
    }
    
    console.log('---');
}

// Handle form submission
async function handleFormSubmit(event) {
    event.preventDefault();
    
    // Get form data
    const formData = new FormData(patientForm);
    const patientData = {
        fullName: formData.get('fullName'),
        age: formData.get('age'),
        sex: formData.get('sex'),
        weight: formData.get('weight'),
        allergies: formData.get('allergies'),
        symptoms: formData.get('symptoms'),
        lang: currentLang
    };
    
    // Validate form data
    if (!validateFormData(patientData)) {
        return;
    }
    
    // Store patient data globally
    currentPatientData = patientData;
    
    // Show loading state
    showLoading();
    
    try {
        // Simulate loading steps
        simulateLoadingSteps();
        
        // Make API call to generate diagnosis
        const diagnosis = await generateDiagnosis(patientData);
        
        // Store diagnosis globally
        currentDiagnosis = diagnosis;
        
        // Store in localStorage for persistence
        localStorage.setItem('lastDiagnosis', JSON.stringify(diagnosis));
        
        // Show results
        showResults(diagnosis);
        
    } catch (error) {
        console.error('Diagnosis generation failed:', error);
        showError(error.message);
    }
}

// Validate form data
function validateFormData(data) {
    const errors = [];
    
    if (!data.fullName.trim()) {
        errors.push('Full name is required');
    }
    
    if (!data.age || data.age < 0 || data.age > 120) {
        errors.push('Age must be between 0 and 120 years');
    }
    
    if (!data.sex) {
        errors.push('Sex selection is required');
    }
    
    if (!data.weight || data.weight < 0.5 || data.weight > 500) {
        errors.push('Weight must be between 0.5 and 500 kg');
    }
    
    if (!data.symptoms.trim()) {
        errors.push('Symptoms description is required');
    }
    
    if (errors.length > 0) {
        showError(errors.join('\n'));
        return false;
    }
    
    return true;
}

// Generate diagnosis using API
async function generateDiagnosis(patientData) {
    try {
        const response = await fetch('/api/diagnosis/generate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(patientData)
        });
        
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Failed to generate diagnosis');
        }
        
        const result = await response.json();
        return result;
        
    } catch (error) {
        console.error('API Error:', error);
        throw new Error(t('errors.apiFail'));
    }
}

// Simulate loading steps
function simulateLoadingSteps() {
    const steps = document.querySelectorAll('.loading-steps .step');
    let currentStep = 0;
    
    const stepInterval = setInterval(() => {
        if (currentStep < steps.length) {
            // Remove active class from all steps
            steps.forEach(step => step.classList.remove('active'));
            
            // Add active class to current step
            if (currentStep < steps.length) {
                steps[currentStep].classList.add('active');
            }
            
            currentStep++;
        } else {
            clearInterval(stepInterval);
        }
    }, 800);
}

// Show loading section
function showLoading() {
    formSection.style.display = 'none';
    resultsSection.style.display = 'none';
    loadingSection.style.display = 'block';
    loadingSection.classList.add('fade-in');
}

// Show results section
function showResults(diagnosis) {
    loadingSection.style.display = 'none';
    resultsSection.style.display = 'block';
    resultsSection.classList.add('slide-up');
    
    // Update confidence badge
    const inferred = inferConfidenceFromText(diagnosis.diagnosis);
    const finalConfidence = Number.isFinite(diagnosis.confidence) && diagnosis.confidence > 0
        ? diagnosis.confidence
        : (Number.isFinite(inferred) ? inferred : 0);
    diagnosis.confidence = finalConfidence; // persist for exports
    updateConfidenceBadge(finalConfidence);
    
    // Show/hide emergency warning
    if (diagnosis.isEmergency === true || diagnosis.criticalWarning === true) {
        emergencyWarning.style.display = 'block';
    } else {
        emergencyWarning.style.display = 'none';
    }
    
    // Display prescription content
    displayPrescription(diagnosis.diagnosis);
    
    // Scroll to results
    resultsSection.scrollIntoView({ behavior: 'smooth' });
}

// Update confidence badge
function updateConfidenceBadge(confidence) {
    const value = Math.max(0, Math.min(100, parseInt(confidence || 0)));
    confidenceText.textContent = `${t('results.confidence', 'Confidence')}: ${value}%`;
    
    // Update badge color based on confidence level
    if (value >= 80) {
        confidenceBadge.style.background = 'linear-gradient(135deg, #10b981 0%, #059669 100%)';
    } else if (value >= 60) {
        confidenceBadge.style.background = 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)';
    } else {
        confidenceBadge.style.background = 'linear-gradient(135deg, #ef4444 0%, #dc2626 100%)';
    }
}

// Try to infer confidence from the diagnosis text if backend didn't parse
function inferConfidenceFromText(text) {
    if (!text || typeof text !== 'string') return 0;
    // Machine-readable first
    const m = text.match(/CONFIDENCE_PERCENT\s*=\s*(\d{1,3})/i);
    if (m) return parseInt(m[1]);
    // Multi-language captions
    const r = text.match(/(Confidence|Confidence\s*Level|‡§Ü‡§§‡•ç‡§Æ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏|‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏|‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏\s*‡§™‡§æ‡§§‡§≥‡•Ä)[^\d]{0,20}(\d{1,3})%/i);
    if (r) return parseInt(r[2]);
    return 0;
}

// Display prescription content
function displayPrescription(diagnosis) {
    // Render diagnosis with medications table converted to HTML
    const html = renderDiagnosisWithMedTable(diagnosis);
    prescriptionContent.innerHTML = html;
}

// Convert diagnosis markdown to HTML, focusing on the Medications table
function renderDiagnosisWithMedTable(text) {
    if (!text) return '';

    // Simple escape for HTML, then we will replace sections we format manually
    const escapeHtml = (s) => s
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');

    // Extract medications markdown table block starting with a header that includes "Medications"
    const lines = text.split(/\r?\n/);
    let start = -1;
    let end = -1;
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        if (line.startsWith('üíä') && /medications/i.test(line)) {
            // Find the start of the markdown table (first line with | col |)
            for (let j = i + 1; j < lines.length; j++) {
                const lj = lines[j];
                if (/^\s*\|.*\|\s*$/.test(lj)) { start = j; break; }
                // skip blank or caption lines until table header is found
                if (lj.trim() === '') { continue; }
            }
            if (start !== -1) {
                // Find the end of the table block (first non-table line or blank after table has started)
                for (let k = start; k < lines.length; k++) {
                    if (!/^\s*\|.*\|\s*$/.test(lines[k])) {
                        end = k - 1;
                        break;
                    }
                }
                if (end === -1) end = lines.length - 1;
            }
            break;
        }
    }

    if (start === -1 || end === -1) {
        // Fallback: try to find ANY markdown table anywhere in the text
        const allLines = lines;
        let gStart = -1, gEnd = -1;
        for (let i = 0; i < allLines.length; i++) {
            if (/^\s*\|.*\|\s*$/.test(allLines[i])) {
                gStart = i;
                for (let k = i; k < allLines.length; k++) {
                    if (!/^\s*\|.*\|\s*$/.test(allLines[k])) { gEnd = k - 1; break; }
                }
                if (gEnd === -1) gEnd = allLines.length - 1;
                break;
            }
        }
        if (gStart !== -1 && gEnd !== -1 && gEnd > gStart) {
            // Render found table anywhere
            const tableLines = allLines.slice(gStart, gEnd + 1).map(l => l.trim()).filter(Boolean);
            const headerLine = tableLines[0];
            const dataLines = tableLines.slice(2);
            const splitRow = (row) => row.replace(/^\|/, '').replace(/\|$/, '').split('|').map(c => c.trim());
            const headers = splitRow(headerLine).map(h => h || '');
            const rows = dataLines.filter(l => /^\|/.test(l)).map(splitRow).filter(cells => cells.some(c => c && !/^[-]+$/.test(c)));
            const ths = headers.map(h => `<th>${escapeHtml(h)}</th>`).join('');
            const trs = rows.map(cells => `<tr>${cells.map(c => `<td>${escapeHtml(c)}</td>`).join('')}</tr>`).join('');
            const tableHtml = `
                <table class="medications-table">
                    <thead><tr>${ths}</tr></thead>
                    <tbody>${trs}</tbody>
                </table>
            `;
            const before = allLines.slice(0, gStart).join('\n');
            const after = allLines.slice(gEnd + 1).join('\n');
            const beforeHtml = `<pre class="diagnosis-pre">${escapeHtml(before).replace(/\n/g, '\n')}</pre>`;
            const afterHtml = `<pre class="diagnosis-pre">${escapeHtml(after).replace(/\n/g, '\n')}</pre>`;
            return `${beforeHtml}${tableHtml}${afterHtml}`;
        }
        // No table found anywhere; return escaped text
        return `<pre class="diagnosis-pre">${escapeHtml(text)}</pre>`;
    }

    // Parse the markdown table between start..end
    const tableLines = lines.slice(start, end + 1).map(l => l.trim()).filter(Boolean);
    // Expect first row headers, second separator, then rows
    const headerLine = tableLines[0];
    const separatorLine = tableLines[1] || '';
    const dataLines = tableLines.slice(2);

    const splitRow = (row) => row
        .replace(/^\|/, '')
        .replace(/\|$/, '')
        .split('|')
        .map(c => c.trim())
        .map(c => c.replace(/^\[(.*)\]$/, '$1')); // remove [placeholders]

    const headers = splitRow(headerLine).map(h => h || '');
    const rows = dataLines
        .filter(l => /^\|/.test(l))
        .map(splitRow)
        .filter(cells => cells.some(c => c && !/^[-]+$/.test(c)));

    // Build HTML table
    const ths = headers.map(h => `<th>${escapeHtml(h)}</th>`).join('');
    const trs = rows.map(cells => `<tr>${cells.map(c => `<td>${escapeHtml(c)}</td>`).join('')}</tr>`).join('');
    const tableHtml = `
        <table class="medications-table">
            <thead><tr>${ths}</tr></thead>
            <tbody>${trs}</tbody>
        </table>
    `;

    // Replace the markdown table in the original text with our HTML table
    const before = lines.slice(0, start).join('\n');
    const after = lines.slice(end + 1).join('\n');

    // Do not inject extra headers; preserve original text
    const beforeHtml = `<pre class="diagnosis-pre">${escapeHtml(before).replace(/\n/g, '\n')}</pre>`;
    const afterHtml = `<pre class="diagnosis-pre">${escapeHtml(after).replace(/\n/g, '\n')}</pre>`;

    // Return without forcing English captions
    return `${beforeHtml}${tableHtml}${afterHtml}`;
}

// Show form section
function showForm() {
    resultsSection.style.display = 'none';
    formSection.style.display = 'block';
    formSection.classList.add('fade-in');
    
    // Clear form
    clearForm();
    
    // Scroll to form
    formSection.scrollIntoView({ behavior: 'smooth' });
}

// Clear form
function clearForm() {
    patientForm.reset();
    
    // Clear any stored data
    currentDiagnosis = null;
    currentPatientData = null;
    localStorage.removeItem('lastDiagnosis');
}

// Show error message
function showError(message) {
    // Hide loading if it's showing
    loadingSection.style.display = 'none';
    
    // Show form again
    formSection.style.display = 'block';
    
    // Create and show error alert
    const errorAlert = document.createElement('div');
    errorAlert.className = 'error-alert';
    errorAlert.innerHTML = `
        <div class="error-content">
            <i class="fas fa-exclamation-circle"></i>
            <div>
                <h4>Error</h4>
                <p>${message}</p>
            </div>
            <button class="error-close" onclick="this.parentElement.parentElement.remove()">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `;
    
    // Add error alert to form section
    formSection.insertBefore(errorAlert, formSection.firstChild);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
        if (errorAlert.parentElement) {
            errorAlert.remove();
        }
    }, 5000);
}

// Download prescription as PDF
async function downloadPrescription() {
    if (!currentDiagnosis) {
        showError(t('errors.noPrescription'));
        return;
    }
    
    try {
        downloadBtn.disabled = true;
        downloadBtn.innerHTML = `<i class="fas fa-spinner fa-spin"></i> ${t('buttons.download')}`;
        
        // Check if html2pdf is available
        if (typeof html2pdf === 'undefined') {
            console.log('‚ùå html2pdf not found, falling back to text file');
            throw new Error('PDF library not available');
        }
        
        console.log('‚úÖ html2pdf available. Rendering content to image and embedding in PDF...');
        
        // Create HTML content and mount off-screen for rendering
        const htmlContent = createPDFHTML();
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = htmlContent;
        tempDiv.style.position = 'fixed';
        tempDiv.style.left = '0';
        tempDiv.style.top = '0';
        tempDiv.style.width = '794px'; /* ~A4 width at 96dpi */
        tempDiv.style.background = '#ffffff';
        tempDiv.style.zIndex = '-1';
        document.body.appendChild(tempDiv);
        
        // Wait for layout
        await new Promise(r => requestAnimationFrame(r));
        
        // Render to canvas
        const canvas = await html2canvas(tempDiv, { scale: 2, backgroundColor: '#ffffff', useCORS: true });
        const imgData = canvas.toDataURL('image/png');
        
        // Clean up DOM node
        document.body.removeChild(tempDiv);
        
        const localizedName = currentPatientData.fullName.replace(/\s+/g, '_');
        const fileBase = `${localizedName}_prescription_${new Date().toISOString().split('T')[0]}_${currentLang}`;
        
        // Try to create PDF if jsPDF is available; else download PNG
        if (window.jspdf && window.jspdf.jsPDF) {
            const pdf = new window.jspdf.jsPDF('p', 'mm', 'a4');
            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = (canvas.height * pdfWidth) / canvas.width;
            pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
            pdf.save(`${fileBase}.pdf`);
            showSuccessMessage(t('buttons.download'));
        } else if (window.jsPDF) {
            const pdf = new window.jsPDF('p', 'mm', 'a4');
            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = (canvas.height * pdfWidth) / canvas.width;
            pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
            pdf.save(`${fileBase}.pdf`);
            showSuccessMessage(t('buttons.download'));
        } else {
            // Fallback: download image if PDF lib not present
            const a = document.createElement('a');
            a.href = imgData;
            a.download = `${fileBase}.png`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            showSuccessMessage('PDF library unavailable. Downloaded PNG instead.');
        }
        
    } catch (error) {
        console.error('PDF generation failed:', error);
        console.log('Attempting image export fallback...');
        try {
            await exportPrescriptionAsImage();
            showSuccessMessage('Image downloaded successfully!');
        } catch (imgErr) {
            console.error('Image export failed:', imgErr);
            console.log('Falling back to text file...');
            createTextFile();
        }
    } finally {
        downloadBtn.disabled = false;
        downloadBtn.innerHTML = '<i class="fas fa-download"></i> Download Prescription (PDF)';
    }
}

// Create HTML content for PDF
function createPDFHTML() {
    const diagnosis = currentDiagnosis.diagnosis;
    const confidence = currentDiagnosis.confidence || 'Unknown';
    const date = new Date().toISOString().split('T')[0];
    const renderedDiagnosis = renderDiagnosisWithMedTable(diagnosis);
    
    return `
        <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 800px; margin: 0 auto;">
            <style>
                .medications-table { width: 100%; border-collapse: collapse; margin: 12px 0 20px 0; font-family: Arial, sans-serif; font-size: 14px; }
                .medications-table th, .medications-table td { border: 2px solid #0f172a; padding: 8px 10px; text-align: left; }
                .medications-table thead th { background: #e2e8f0; color: #0f172a; }
                .medications-table tbody tr:nth-child(even) { background: #f8fafc; }
                .section-title { font-weight: 700; color: #1e293b; margin: 12px 0 6px 0; border-bottom: 2px solid #e2e8f0; padding-bottom: 4px; }
                .diagnosis-pre { white-space: pre-wrap; font-family: 'Courier New', monospace; }
            </style>
            <div style="text-align: center; border-bottom: 2px solid #2563eb; padding-bottom: 20px; margin-bottom: 30px;">
                <h1 style="color: #2563eb; margin: 0; font-size: 28px;">AI DOCTOR</h1>
                <h2 style="color: #374151; margin: 10px 0 0 0; font-size: 18px;">Medical Diagnosis & Prescription Report</h2>
            </div>
            
            
            <div style="margin-bottom: 30px;">
                <h3 style="color: #2563eb; border-bottom: 1px solid #e5e7eb; padding-bottom: 10px;">AI Diagnosis</h3>
                <div style="background: #f8fafc; padding: 15px; border-radius: 8px; border-left: 4px solid #2563eb;">
                    ${renderedDiagnosis}
                </div>
            </div>
            
            <div style="margin-bottom: 30px;">
                <h3 style="color: #2563eb; border-bottom: 1px solid #e5e7eb; padding-bottom: 10px;">Confidence Level</h3>
                <div style="background: ${confidence >= 80 ? '#dcfce7' : confidence >= 60 ? '#fef3c7' : '#fee2e2'}; 
                            color: ${confidence >= 80 ? '#166534' : confidence >= 60 ? '#92400e' : '#991b1b'}; 
                            padding: 10px 15px; border-radius: 6px; display: inline-block; font-weight: bold;">
                    ${confidence}% Confidence
                </div>
            </div>
            
            <div style="margin-bottom: 30px;">
                <h3 style="color: #2563eb; border-bottom: 1px solid #e5e7eb; padding-bottom: 10px;">Important Disclaimer</h3>
                <div style="background: #fef2f2; border: 1px solid #fecaca; padding: 15px; border-radius: 8px;">
                    <p style="margin: 0; color: #991b1b; font-size: 14px; line-height: 1.5;">
                        <strong>‚ö†Ô∏è IMPORTANT:</strong> This AI-generated diagnosis is for informational purposes only and does not replace professional medical advice. 
                        Please consult a qualified healthcare provider for proper diagnosis and treatment. 
                        This system is designed to assist healthcare professionals and should not be used as a substitute for medical consultation.
                    </p>
                </div>
            </div>
            
            <div style="text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; color: #6b7280; font-size: 12px;">
                <p style="margin: 0;">Generated by AI Doctor System</p>
                <p style="margin: 5px 0 0 0;">Date: ${date} | Time: ${new Date().toLocaleTimeString()}</p>
            </div>
        </div>
    `;
}

// Export prescription view as PNG image using html2canvas
async function exportPrescriptionAsImage() {
    // Prefer the visible results section; fallback to generated HTML
    let targetEl = resultsSection || document.body;

    // If results are not visible, create a temporary node from HTML generator
    let tempDiv = null;
    if (!resultsSection || resultsSection.style.display === 'none') {
        const htmlContent = createPDFHTML();
        tempDiv = document.createElement('div');
        tempDiv.innerHTML = htmlContent;
        tempDiv.style.position = 'absolute';
        tempDiv.style.left = '-9999px';
        document.body.appendChild(tempDiv);
        targetEl = tempDiv;
    }

    if (typeof html2canvas === 'undefined') {
        throw new Error('html2canvas not available');
    }

    const canvas = await html2canvas(targetEl, { scale: 2, backgroundColor: '#ffffff' });
    const dataUrl = canvas.toDataURL('image/png');
    const a = document.createElement('a');
    a.href = dataUrl;
    a.download = `prescription_${currentPatientData.fullName.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.png`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);

    if (tempDiv && tempDiv.parentElement) {
        tempDiv.parentElement.removeChild(tempDiv);
    }
}

// Generate PDF content
function generatePDFContent(pdf) {
    const patient = currentPatientData;
    const diagnosis = currentDiagnosis.diagnosis;
    const confidence = currentDiagnosis.confidence || 'Unknown';
    const date = new Date().toISOString().split('T')[0];
    
    // Set up the PDF
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('AI DOCTOR - MEDICAL DIAGNOSIS REPORT', 20, 30);
    
    // Patient Information
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.text('PATIENT INFORMATION:', 20, 50);
    
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Name: ${patient.fullName}`, 20, 65);
    pdf.text(`Age: ${patient.age} years`, 20, 75);
    pdf.text(`Sex: ${patient.sex}`, 20, 85);
    pdf.text(`Weight: ${patient.weight} kg`, 20, 95);
    pdf.text(`Allergies: ${patient.allergies || "None"}`, 20, 105);
    
    // Symptoms
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.text('SYMPTOMS:', 20, 125);
    
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    
    // Split symptoms into lines
    const symptomsLines = splitTextIntoLines(patient.symptoms, 60);
    let yPos = 140;
    symptomsLines.forEach(line => {
        pdf.text(line, 20, yPos);
        yPos += 6;
    });
    
    // Diagnosis
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.text('DIAGNOSIS:', 20, yPos + 10);
    
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    
    // Split diagnosis into lines
    const diagnosisLines = splitTextIntoLines(diagnosis, 60);
    yPos += 25;
    diagnosisLines.forEach(line => {
        // Check if we need a new page
        if (yPos > 250) {
            pdf.addPage();
            yPos = 20;
        }
        pdf.text(line, 20, yPos);
        yPos += 6;
    });
    
    // Confidence and Date
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'bold');
    pdf.text(`CONFIDENCE: ${confidence}%`, 20, yPos + 15);
    pdf.text(`DATE: ${date}`, 20, yPos + 25);
    
    // Disclaimer
    pdf.setFontSize(8);
    pdf.setFont('helvetica', 'italic');
    pdf.text('This is for informational purposes only. Please consult a healthcare provider.', 20, yPos + 40);
    
    console.log('PDF content generated successfully');
}

// Split text into lines that fit the page
function splitTextIntoLines(text, maxChars) {
    const words = text.split(' ');
    const lines = [];
    let currentLine = '';
    
    words.forEach(word => {
        if ((currentLine + ' ' + word).length <= maxChars) {
            currentLine += (currentLine ? ' ' : '') + word;
        } else {
            if (currentLine) {
                lines.push(currentLine);
                currentLine = word;
            } else {
                lines.push(word);
            }
        }
    });
    
    if (currentLine) {
        lines.push(currentLine);
    }
    
    return lines;
}



// Fallback: Create a simple text file
function createTextFile() {
    const content = createFormattedDocument();
    const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `prescription_${currentPatientData.fullName.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    showSuccessMessage('PDF generation failed. Text file downloaded instead.');
}

// Create formatted document content
function createFormattedDocument() {
    if (!currentDiagnosis || !currentPatientData) {
        return 'No prescription data available';
    }
    
    const patient = currentPatientData;
    const diagnosis = currentDiagnosis.diagnosis;
    const confidence = currentDiagnosis.confidence || 'Unknown';
    const date = new Date().toISOString().split('T')[0];
    
    return `AI DOCTOR - MEDICAL DIAGNOSIS REPORT
===============================================

üìÑ PRESCRIPTION SUMMARY

üë§ PATIENT INFORMATION:
   Name: ${patient.fullName}
   Age: ${patient.age} years
   Sex: ${patient.sex}
   Weight: ${patient.weight} kg
   Allergies: ${patient.allergies || "None"}

ü©∫ SYMPTOMS REPORTED:
   ${patient.symptoms}

üß† DIAGNOSIS:
   ${diagnosis}

üìä CONFIDENCE LEVEL: ${confidence}%

üìÖ DATE: ${date}

===============================================
‚ö†Ô∏è  IMPORTANT DISCLAIMER:
This prescription summary is for informational purposes only 
and does not replace professional medical advice. Please 
consult a qualified healthcare provider for diagnosis and 
treatment.

Generated by AI Doctor System
Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}
`;
}

// Create PDF content (kept for compatibility)
function createPDFContent() {
    if (!currentDiagnosis || !currentPatientData) {
        return 'No prescription data available';
    }
    
    return currentDiagnosis.diagnosis;
}

// Show success message
function showSuccessMessage(message) {
    const successAlert = document.createElement('div');
    successAlert.className = 'success-alert';
    successAlert.innerHTML = `
        <div class="success-content">
            <i class="fas fa-check-circle"></i>
            <div>
                <h4>Success</h4>
                <p>${message}</p>
            </div>
            <button class="success-close" onclick="this.parentElement.parentElement.remove()">
                <i class="fas fa-times"></i>
            </button>
        </div>
    `;
    
    // Add success alert to results section
    resultsSection.insertBefore(successAlert, resultsSection.firstChild);
    
    // Auto-remove after 3 seconds
    setTimeout(() => {
        if (successAlert.parentElement) {
            successAlert.remove();
        }
    }, 3000);
}

// Add CSS for alerts
const alertStyles = `
    .error-alert, .success-alert {
        background: white;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        border-left: 4px solid;
        animation: slideIn 0.3s ease-out;
    }
    
    .error-alert {
        border-left-color: #ef4444;
        background: #fef2f2;
    }
    
    .success-alert {
        border-left-color: #10b981;
        background: #f0fdf4;
    }
    
    .error-content, .success-content {
        display: flex;
        align-items: flex-start;
        gap: 15px;
    }
    
    .error-content i {
        color: #ef4444;
        font-size: 1.5rem;
        margin-top: 2px;
    }
    
    .success-content i {
        color: #10b981;
        font-size: 1.5rem;
        margin-top: 2px;
    }
    
    .error-content h4, .success-content h4 {
        margin: 0 0 5px 0;
        font-size: 1.1rem;
    }
    
    .error-content p, .success-content p {
        margin: 0;
        color: #374151;
        line-height: 1.5;
    }
    
    .error-close, .success-close {
        background: none;
        border: none;
        color: #6b7280;
        cursor: pointer;
        padding: 5px;
        border-radius: 5px;
        transition: all 0.2s ease;
        margin-left: auto;
    }
    
    .error-close:hover, .success-close:hover {
        background: rgba(0, 0, 0, 0.1);
        color: #374151;
    }
    
    @keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
`;

// Inject alert styles
const styleSheet = document.createElement('style');
styleSheet.textContent = alertStyles;
document.head.appendChild(styleSheet);

// Utility functions
function formatDate(date) {
    return new Date(date).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
}

function formatTime(date) {
    return new Date(date).toLocaleTimeString('en-US', {
        hour: '2-digit',
        minute: '2-digit'
    });
}

// Export functions for global access
window.AIDoctor = {
    clearForm,
    downloadPrescription,
    showForm,
    showResults
};
